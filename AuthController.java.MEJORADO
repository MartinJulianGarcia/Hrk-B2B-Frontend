package com.hrk.tienda_b2b.controller;

import com.hrk.tienda_b2b.dto.AuthResponse;
import com.hrk.tienda_b2b.dto.LoginRequest;
import com.hrk.tienda_b2b.dto.RegisterRequest;
import com.hrk.tienda_b2b.dto.UsuarioDTO;
import com.hrk.tienda_b2b.model.Usuario;
import com.hrk.tienda_b2b.security.JwtService;
import com.hrk.tienda_b2b.service.UsuarioService;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.Map;

@RestController
@RequestMapping("/api/auth")
@CrossOrigin(origins = "*")
@RequiredArgsConstructor
public class AuthController {
    private final UsuarioService usuarioService;
    private final JwtService jwtService;

    @PostMapping("/register")
    public ResponseEntity<?> register(@RequestBody RegisterRequest request) {
        try {
            Usuario usuario = usuarioService.registrar(request);
            String token = jwtService.generateToken(usuario);
            AuthResponse response = AuthResponse.builder()
                    .token(token)
                    .usuario(UsuarioDTO.fromEntity(usuario))
                    .build();
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            // ✅ MEJORADO: Devolver un objeto con mensaje de error en lugar de null
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", e.getMessage());
            errorResponse.put("error", "VALIDATION_ERROR");
            return ResponseEntity.badRequest().body(errorResponse);
        } catch (Exception e) {
            // ✅ MEJORADO: Manejar otros errores inesperados
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "Error interno del servidor: " + e.getMessage());
            errorResponse.put("error", "INTERNAL_ERROR");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    @PostMapping("/login")
    public ResponseEntity<?> login(@RequestBody LoginRequest request) {
        try {
            Usuario usuario = usuarioService.login(request);
            String token = jwtService.generateToken(usuario);
            AuthResponse response = AuthResponse.builder()
                    .token(token)
                    .usuario(UsuarioDTO.fromEntity(usuario))
                    .build();
            return ResponseEntity.ok(response);
        } catch (IllegalArgumentException e) {
            // ✅ MEJORADO: Devolver un objeto con mensaje de error
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", e.getMessage());
            errorResponse.put("error", "AUTH_ERROR");
            return ResponseEntity.badRequest().body(errorResponse);
        } catch (Exception e) {
            // ✅ MEJORADO: Manejar otros errores inesperados
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "Error interno del servidor: " + e.getMessage());
            errorResponse.put("error", "INTERNAL_ERROR");
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(errorResponse);
        }
    }

    @GetMapping("/me")
    public ResponseEntity<?> getCurrentUser(@RequestHeader("Authorization") String token) {
        try {
            String email = jwtService.extractUsername(token.substring(7));
            Usuario usuario = usuarioService.obtenerPorEmail(email)
                    .orElseThrow(() -> new IllegalArgumentException("Usuario no encontrado"));
            return ResponseEntity.ok(UsuarioDTO.fromEntity(usuario));
        } catch (Exception e) {
            Map<String, String> errorResponse = new HashMap<>();
            errorResponse.put("message", "Token inválido o usuario no encontrado");
            errorResponse.put("error", "AUTH_ERROR");
            return ResponseEntity.badRequest().body(errorResponse);
        }
    }
}
